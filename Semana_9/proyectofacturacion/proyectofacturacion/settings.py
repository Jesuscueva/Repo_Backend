"""
Django settings for proyectofacturacion project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'tfk&q_v)rs3bh1sgm&1z)q+hmv)&c8iyy0dwbgjq(qtf9z9qkt'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'drf_yasg', # sirve para que cargue los css js 
    'corsheaders',
    'restaurante',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # para poder cargar los estilos a mi bd
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'proyectofacturacion.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'proyectofacturacion.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'proyectofacturacion',
        'USER': 'root',
        'PASSWORD': 'root',
        'HOST': 'localhost',
        'PORT': '3306'
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'es'

TIME_ZONE = 'America/Lima'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

# Al nosotros sobreescribir el modelo del usuario tenemos que indicar a django
AUTH_USER_MODEL = "restaurante.PersonalModel"
# sirve para indicar donde se guardaran todo los archivos pasados por el client
MEDIA_URL = '/media/'
# sirve para mostrar el archivo multimedia mediante una URL
MEDIA_ROOT = BASE_DIR / 'media'

# Habilitar LOS CORS
CORS_ALLOW_ALL_ORIGINS = True

# Para modificar configuraciones de Django-rest-framework se hace mediante la variable REST_FRAMEWORK

REST_FRAMEWORK= {
    'DEFAULT_AUTHENTICATION_CLASSES' : (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

# Para modificar la configuracion predeterminada de nustro simple-jwt

from datetime import timedelta
# https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html#
SIMPLE_JWT = {
    # Sirve para indicar la pk de nuestra tabla user si es que la hemos cambiado (x defecto es 'id')
    'USER_ID_FIELD': 'personalId', 
    # sirvve para indicar cuanto de vida va a tener la token de ACCESO
    'ACCESS_TOKEN_LIFETIME' : timedelta(hours= 1),
    # Sirve para indicar que algoritmo va a usar para encriptar la token
    'ALGORITHM': 'HS256', # 'HS384' 'HS512
    # sirve para indicar mediante que palabra va a utilizar para identificar la token
    'AUTH_HEADER_TYPES' : ('Bearer', ),
    # Si el usuario acepta renovar la sesion la token de acceso que se crear√° sera con un tiempo de vida de un dia
    'REFRESH_TOKEN_LIFETIME0' : timedelta(days=1)
}

# PARA QUE CUANDO HAGAMOS PY.MANAGE.PY collectstatic ganare todos los assets en la carpeta que le indicamos a continuacion
STATIC_ROOT = BASE_DIR / "assets/"